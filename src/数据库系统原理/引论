







[1.1.3 数据库系统与文件系统的对比]
    1 文件处理系统由传统操作系统所支持,任何操作系统都带有文件系统
    2 文件系统中存储组织信息的主要弊端:
        [数据冗余和不一致]
            多种文件格式,信息重复存储
        [数据访问困难]
            需要编写一个新的程序来完成每一个新的任务
        [数据孤立]
            多文件多格式,检索,共享数据困难
        [数据完整性问题]
            完整性约束性(如账户余额>0)成为程序代码的一部分
            增加新的约束或更改现有的约束很难    (但在数据库内,可以做相应的约束)
        [原子性问题]
            在进行部分数据更新时,一旦发生故障,可能导致数据库处于不一致的状态
            例如,从一个账户转账到另一个账户,我们希望转账的过程中,数据是原子性发生的,就是数据改变是都发生或者都不发生
        [并发访问异常]
            同时打开一个文件可以的,但不能同时写入
            (数据访问天然支持并发访问的)
        [安全性问题]
            并非所有用户都可以访问所有数据
        [网友给出数据库区别的小结]    
        文件系统:操作系统都带有文件系统,可直接使用.对于一些复杂的任务文件系统是不能够胜任的.文件系统只能胜任粗粒度的数据管理
        数据库系统:仅有一套sql标准,数据库系统能胜任负责的细粒度的数据管理任务
        
        
[1.2 数据库模式及数据类型]
.    
    [1.2.1 模式]
    关系型数据库管理系统公司:甲骨文,sap,ibm,微软
    关系数据库公司也面临"面向对象DB"公司的挑战
        [开源数据库系统]
        mysql
            是网站上小型系统最流行的开源数据库
        postgresql
            是一个高度可扩展的,开放源码的对象关系型数据库管理系统
        [如何使用数据库]
        不同的用法需要不同层次管理
            [物理层]
                描述数据实际上是怎么样存储的,硬件上的
            [逻辑层]
                描述数据库中存储什么数据及这些数据间存在什么关系
            [视图层]
                应用程序能够隐藏数据类型的详细信息,视图也可以用于安全目的隐藏数据信息,如员工的薪水
        [数据抽象的三层结构]
            视图层(最上)------面向不同的应用,可以有不同的视图
            逻辑层(中间)
            物理层(最下)
        [实例和模式]
            类似编程语言中的类型(types)和变量(variable)
                类型-模式,变量-实例
            模式:数据库的总体设计
                类似于程序中变量的类型信息
                物理模式:在物理层描述数据库的设计
                逻辑模式:在逻辑层描述数据库的设计
            实例:特定时刻存储在数据库中的信息的集合
                类似于程序中变量的值
        [数据库系统的模式结构]
            物理层---内模式
            逻辑层---模式
            视图层---外模式
            通过映射可以相互转化
        [物理独立性和逻辑独立性]
            修改一层的结构定义不影响更高层的结构定义
            物理数据独立性:修改物理结构而不需要改变逻辑结构的能力(由DBMS自动实现,通俗说就是用户不用关心在物理层面的存储)
                应用程序依赖于逻辑结构
                应用程序独立于数据的结构和存储
                这是使用DBMS最重要的好处
            逻辑数据独立性:数据逻辑结构的改变不影响应用程序
                逻辑数据独立性一般难以实现,因为应用程序严重依赖于数据的逻辑结构
    [1.2.2 数据模型]
        概念工具的集合
        用于描述:
            数据结构
            数据关系
            数据语义
            数据约束
        数据抽象的不同层次需要不同的数据模型来描述
            实体-关系模型(重要):ER模型,处于概念层次
            关系模型(重要):处于逻辑层次
            其他模型
                面向对象模型
                半结构化数据模型
                ...
            [数据库设计步骤,6个步骤]
                1 需求分析
                    现实世界
                2 概念数据库设计:ER模型
                    信息世界
                3 逻辑数据库设计:和具体的DBMS有关
                    机器世界
                4 结构优化:关系标准化检查,检查冗余和相关的异常关系结构
                5 物理数据库设计:索引,集群和数据库调优
                6 创建并初始化数据库&安全设计:加载初始数据,测试,识别不同的用户及他们的角色
            [E-R模型]
                实体(对象)
                    例如:客户,账户,银行分支机构
                    实体由属性描述
                联系:是几个实体之间的关联
                    例如:两个entity之间的相互关联
                E-R模型数据库设计主要使用在关系模型的设计中
                [ER图]
                    椭圆表示属性
                    长方形表示实体
                    菱形表示关系
                
[1.3 数据库语言,用户及体系结构]                
.
    [1.3.1 数据库语言]
        数据库语言
            DDL数据库定义语言
            DML数据库操作语言
            DCL数据库控制语言
        [DDL]     
            指定一个数据库模式作为一组关系模式的定义
            指定存储结构,访问方法和一致性约束
            DDL语句经过编译,得到一组存储在一个特殊文件中的表,特殊文件即数据字典,其中包含元数据
            元数据:
                数据库模式
                数据存储结构
                访问方法和约束
                统计信息
                授权
        [DML]
            数据库检索数据
            插入/删除/修改
            也称为查询语言
            [过程化DML]
                要求用户指定需要什么数据,以及如何获得这些数据
            [声明式DML]
                只要求用户指定需要什么数据,而不指明如何获得这些数据sql
        [SQL]
            SQL=DDL+DML+DCL
            在DBMS交互环境中使用该语言
            在宿主语言中，通过ODBC，JDBC使用
            在宿主语言中使用嵌入式SQL
        [数据库使用]
            DB底层
            OS上一层
            DBMS再上一层
    [1.3.2 数据库用户]
        数据库管理员工作
            模式定义
            存储结构与存取方法的定义
            模式及物理组织的修改
            数据访问授权
            日常维护
        [事务管理(重要)]
            事物管理的存在使得支持并发访问数据库,DBMS并发的好坏决定于事物管理模块
            事物:是在数据库应用中完成单一逻辑功能的操作集合
            事物的要求:
                原子性
                一致性:事物的执行不会破坏系统的一致性,修改某个表中的字段内容,同样另一张表字段内容也会更改
                隔离性:同时执行的事务之间是没有影响
                持久性:某个事务被提交以后,对数据的修改是持久的
            事务管理的组件:
                确保系统在出现故障或事务失败的情况下,数据库都能保持一致
            并发控制管理器
        [存储管理器]
            在底层数据存储与应用程序及查询之间,提供结构
            对数据库中的数据进行高效存储,检索与更新
            包括:
                事务管理
                授权和完整性管理
                文件管理
                缓存管理
        [查询处理器]
            向上需要接受数据库语言的输入
            经过解析,优化,执行,输出相应结果给用户
            包括:
                解析和翻译
                优化
                执行
            查询处理优化
                执行给定查询操作的方法
                    等价表达式
                    每个操作有不同的实现算法
                不同执行方法之间的开销差可能是巨大的
                需要预估操作的开销
        [应用程序体现结构]
            两层体系结构(CS):像ODBC和JDBC这样的应用程序接口标准被用于进行客户端和服务器的交互
            三层体系结构(BS):如基于web的应用程序及采用"中间件"构建的应用程序
                (浏览器直接连接的是应用服务器,应用服务器再去连接数据库,三层的结构中,中间的那一层叫中间件层)
        
[第一章 总结]
    数据库管理系统用于维护和查询大量的数据集
    用户故障恢复,并发访问,快速应用开发以及数据集成和数据安全的优点
    抽象使得数据具有独立性:逻辑数据独立性,物理数据独立性
    ER模型,关系模型
    DDL,DML,DCL,SQL
    数据库管理员的职责
    DBS经典体系结构
    
    
    
        





