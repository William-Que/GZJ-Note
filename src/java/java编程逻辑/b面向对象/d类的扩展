[引言]
    除了基本数据类型和类的概念,还有一些扩展概念,包括接口,抽象类,内部类和枚举.
    继承有两面性,替代继承的一种方式是使用接口,介于接口和类之间,还有一个概念:抽象类.
    
    
[5.1 接口的本质]
    将对象看作属于某种数据类型,并按该类型进行操作,在一些情况下,并不能反映对象以及对象操作的本质
    很多时候,我们并不是对象的类型,而是对象的'能力',只要提供这个能力,类型并不重要.
    例如要计算一组数据,只要能计算出结果就行,不关乎通过计算机,计算器,手算出来,只看是否具有计算的能力
    在一些情况下,类型并不重要,重要的是能力.如何表示能力呢? 通过接口
    [接口的概念]
        接口声明了一组能力,但它自己并没有实现这个能力,它只是一个约定.接口涉及交互两方对象
        一方要实现这个接口,另一方使用这个接口
        双方对象并不直接互相依赖,它们只是通过接口间接交互
        拿USB接口来说,USB协议约定了USB设备需要实现的能力,每个USB设备都需要实现这些能力
        计算机使用USB协议与USB设备交互,计算机和USB设备互不依赖,但可以通过USB接口相互交互
    [定义接口]
        接口与类不同,它的方法没有实现代码.定义一个接口本身并没有做什么,也没有太大的用处
        它还需要至少两个参与者:一个需要实现接口,另一个使用接口.
    [实现接口]
        一个类可以实现多个接口,表面类的对象具备多种能力
        实现接口必须要实现接口中声明的方法
    [使用接口]
        与类不同,接口不能new,不能直接创建一个接口的对象,对象只能通过类来创建.
        但可以声明接口类型的变量,引用实现了接口的对象.
        针对接口而非具体类型进行编程,是计算机程序的一种重要思维方式
        接口很多时候反映了对象以及对象操作的本质
        接口的优点:
            代码复用,同一套代码可以处理多种不同类型的对象,只要这些对象都有相同的能力
            接口更重要的是降低了耦合,提高了灵活性.使用接口的代码依赖的是接口本身,而非实现接口的具体类型
    [接口的细节]
        4个细节
        [接口中的变量]
            接口中可以定义变量,但修饰符必须是public static final
            这个变量可以通过"接口名.变量名"的方式使用
        [接口的继承]
            接口可以继承,一个接口可以继承多个其他接口
        [类的继承与接口]
            类的继承与接口可以共存,换句话说就是,类可以在继承的情况下,同时实现一个或多个接口
        [instanceof]
            与类一样,接口也可以使用instanceof关键字,用来判断某个对象是否实现了某个接口
    [使用接口替代继承]
        上一章提到可以使用组合和接口替代继承
        继承有至少有两个好处:  复用代码 ;  利用多态和动态绑定统一处理多种不同子类的对象.
        [组合与接口的特点结合]
        使用组合替代继承,可以复用代码,但不能统一处理
        使用接口继承继承,针对接口编程,可以实现统一处理不同类型的对象,但接口没有代码实现,无法复用代码
        将组合和接口结合起来替代继承,就既可以统一处理,又可以复用代码
        [操作手法]
            定义接口,定义方法
            基类实现接口及接口定义的方法
            子类通过组合使用基类,并且实现接口及接口定义的方法
    [java 8和java 9对接口的增强]
        java 8允许在接口中定义两类新方法:静态方法和默认方法
        引入默认方法主要是函数式数据处理的需求,是为了便于给接口增加功能
        还有一些没看,省略以后看
    [小结]
        针对接口编程是一种重要的程序思维方式,这种方式不仅可以复用代码
        还可以降低耦合,提高灵活性,是分解负责问题的一种重要工具


[5.2 抽象类]
    抽象类就是抽象的类.抽象是相对于具体而言的,一般来说,具体类有直接对应的对象,而抽象类没有,它表达抽象的概念
    [抽象方法和抽象类]
    之前我们介绍过图形类Shape,它有一个方法draw(). Shape其实是一个抽象的概念
    它的draw()方法其实并不知道如何实现,只有子类知道
        [抽象方法]
        这种只有子类才知道如何实现的方法,一般被定义为抽象方法
        [抽象类]
        定义了抽象方法的类必须被声明为抽象类,不过,抽象类可以没有抽象方法
        抽象类和具体类是一样的,可以定义具体方法,实例变量
        [抽象类和具体类的核心区别]
            抽象类不能创建对象(比如,不能使用new Shape()),而具体类可以.
        一个具体类在继承抽象类之后,必须实现抽象类中定义的所有抽象方法,除非它自己也声明为抽象类
    [为什么需要抽象类]
        引入抽象方法和抽象类,是java提供的一种语法工具
        使用抽象方法而非空方法体,子类就知道它必须要实现该方法,而不可能忽略,若忽略java编译器就会报错
        使用抽象类,类的使用者创建对象的时候,就知道必须要使用某个具体子类,而不可能误用不完整的父类
        [引入抽象类的意义]
            每个人都会犯错,减少犯错不能只依赖人的优秀素质,还需要一些机制
            使得一个普通人都容易把事情做对,而难以把事情做错
            抽象类就是Java提供的这种机制
    [抽象类和接口]
        抽象类和接口[相似之处]:
            都不能用于创建对象,接口中的方法其实都是抽象方法
        抽象类和接口[根本上不同]:
            接口中不能定义实例变量,而抽象类可以,一个类可以实现多个接口,但只能继承一个类
        [接口和抽象类的关系]
            接口和抽象类是配合而非替代关系,它们经常一起使用
            接口声明能力,抽象类提供默认实现
            抽象类提供默认实现实现全部或部分方法
            一个接口经常有一个对应的抽象类
                [一个接口经常对应一个抽象类]
                    Collection接口对应的AbstractCollection抽象类
                    List接口对应的AbstractList抽象类
                对于需要实现接口的具体类而言,有两个选择:
                    实现接口,自己实现全部方法
                    继承抽象类,然后根据需要重写方法
        [抽象类和接口配合使用的具体操作手法]
            抽象类实现某个接口,在抽象类内部定义新的抽象方法,该抽象方法可以在抽象类实现接口定义的方法内
            具体类继承抽象类,实现抽象方法
    [小结]
        抽象类,相当于具体类而言,它用于表达抽象概念,虽然在语法上不是必须的,使程序更加清晰,减少误用
        抽象类和接口经常相互配合,接口定义能力,而抽象类提供默认实现,方便子类实现接口
        
        
[5.3 内部类的本质]
    在目前关于类的描述中,每个类都是独立的,都是对应一个java源代码文件,但在java中,一个类还可以放在另一个类中,称为内部类
    一般而言,内部类与包含它的外部类有比较密切的关系,而与其他类关系不大
    定义在内部类,可以实现对外部完全隐藏,可以有更好的封装性,代码实现上也往往更加简洁
    [谁关心内部类]
        内部类只是Java编译器的概念,对于Java虚拟机而言,它是不知道内部类这回事的
        每个内部类最后都会被编译为一个独立的类,生成一个独立的字节码文件
    [内部类的优势]
        内部类可以方便地访问外部类的私有变量
        可以声明private从而实现对外完全隐藏
    [共有4种内部类]
        静态内部类
        成员内部类
        方法内部类
        匿名内部类
        以下进行介绍:
        [静态内部类]
            静态内部类必须带有static关键字
            静态内部类可以自行定义静态变量,静态方法,成员方法,成员变量,构造方法等.
            静态内部类与外部类的联系也不大(与其他内部类相比)
            使用场景:
                如果静态内部类与外部类关系密切,且不依赖于外部类实例,则可以考虑定义为静态内部类
            public静态内部类可以被外部使用,只需要通过"外部类.静态内部类"的方式使用
            @@@Java API中使用静态内部类的例子:
                Integer类内部有一个私有静态内部类IntegerCache,用于支持整数的自动装箱
                表示链表的LinkedList类内部有一个私有静态内部类Node,表示链表中的每个节点
                Character类内部有一个public静态内部类UnicodeBlock,用于表示一个Unicode Block
            [例子]
                一个类内部,如果既要计算最大值,又要计算最小值,可以在一次遍历中将最大值和最小值都计算出来
                但怎么返回呢?可以定义一个类Pair,包括最大值和最小值
                但Pair这个名字太普遍了,而且它主要是类内部使用的
                就可以定义一个静态内部类
        [成员内部类]
            与静态内部类相比,成员内部类没有static修饰符,少了一个static修饰符
            成员内部类还可以直接访问外部类的实例变量和方法
        [方法内部类]
            ...有点难度
        [匿名内部类]
            ...有点难度
            
            
[5.4 枚举的本质]
    枚举是一种特殊的数据,它的取值是有限的,是可以枚举出来的
    虽然使用类也可以处理这种数据,但枚举类型更为简洁,安全和方便
    [基础]
        枚举变量的toString方法返回其字面值,所有枚举类型也都有一个name()方法,返回值与toString()一样.
        枚举变量可以使用equals和==进行比较,结果是一样的
        枚举类型都实现了Java API中的Comparable接口,都可以通过方法compareTo与其他枚举值进行比较.比较其实就是比较ordinal的大小
        枚举变量可以用于和其他类型的变量一样的地方
        在switch语句内部,枚举值不能带枚举类型的前缀
        枚举类型都有一个静态的valueOf(String)方法,可以返回字符串对应的枚举值
        [枚举的好处]
            定义枚举的语言更为简单
            枚举更为安全.一个枚举类型的变量,它的值要么是null,要么为枚举值之一,不可能为其他值,但使用整型变量,它的值就没有办法强制,值可能就是无效.
            枚举类型自带很多便利的方法(如values,valueOf,toString等),易于使用
        [枚举是如何实现的]
            枚举类型会被Java编译器转换为一个对应的类,这个类继承了Java API中的java.lang.Enum类.
            Enum类有name和ordinal两个实例变量,在构造方法中需要传递,name(),toString(),ordinal(),compareTo(),equals()
            values和valuesOf方法是编译器给每个枚举类型自动添加的
        [相关解释说明]
        一般枚举类变量会被转换为对应类的变量,在switch语句中,枚举值会被转换为其对应的ordinal值
        枚举类本质上是类,但由于编译器做了很多事情,因此更为简洁,安全和方便
    [典型场景]
        枚举值的定义需要放在最上面,枚举值写完之后,要以分号(;)结尾,然后才能写其他代码
        [关于枚举值的id和ordinal]
            每个枚举值经常有一个关联的标识符(id),通常用int整数表示
            使用整数可以节约存储空间,减少网络传输
            一个自然的想法就是使用枚举中自带的ordinal值,但ordinal并不是一个好的选择
            因为ordinal值会随着枚举值在定义中的位置变化而变化
            我们希望id值和枚举值的关系保持不变    
             
            
            
            
            
            
            
            
            
            
        