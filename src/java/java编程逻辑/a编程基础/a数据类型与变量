[1.1 数据类型和变量]
    操作系统运行的描述:
        操作系统将时间分成很多细小的时间片,一个时间片给一个程序使用,另一个时间片给另一个程序使用,
        并频繁地在程序之间切换.不过对于程序看来,整个机器资源都好像归它使用,操作系统给他制造了这种假象.
    引入数据类型和变量的意义:
        为了方便人类操作数据.
    引入流程控制的意义:
        为了编写有实用功能的程序,两种控制流程:条件执行,循环.
    引入函数和子程序的意义:
        为了减少重复代码和分解复杂操作.
    [基本数据类型]
    整数类型:byte(1),short(2),int(4),long(8)
    小数类型:float(4),double(8)
    字符类型:char(2)
    真假类型:boolean(1字节或者4字节)
    [基本数据类型与对象]
    Java是面向对象的语言,除了基本数据类型,其他都是对象类型.对象简单来说,就是由基本数据类型,
    数组和其他对象组合而成的一个东西,以方便对其整体进行操作.
    描述基本数据类型与对象之间的关系:
        世界万物都是由元素周期表中的基本元素组成的,基本数据类型就相当于化学中的基本元素,
        而对象就就相当于世界万物.
    [变量的概念]
    为了操作数据,需要把数据存放到内存中.所谓的内存在程序看来就是一块有地址编号的连续的空间,
    数据放到内存中的某个位置后,为了方便地找到和操作这个数据,需要给这个位置起个名字.
    编程语言通过变量这个概念来表示这个过程.
    之所以叫"变"量,是因为它表示的是内存中的位置,这个位置存放的值是可以变化的
    (作者表达的关键点在后边,'位置存放的值是可以变化的')
    虽然变量的值是可以变化的,但变量的名字是不变的,这个名字应该代表程序员心目中这块内存空间的意义,
    这个意义应该是不变的.
    变量就是给数据起的名字,方便找不同的数据,它的值可以变,但含义不变.
    (作者的表达让我意识到了一点,从设计基本数据类型到设计变量概念,都是为了方便人操作计算机)
    通过声明变量,每个变量赋予一个数据类型和一个有意义的名字,我们就告诉了计算机要操作的数据

[1.2 赋值---对计算机的操作]
    声明变量之后,就在内存分配了一块位置(地址),但这个位置的内容是位置的,
    赋值就是把这块位置的内容设为一个确定的值.
    Java中基本类型,数组,对象的赋值有明显的不同(不同应该和传承有关,基本数据类型是传承c语言的)
    
[1.3 基本运算]
    算术运算:加减乘除
    比较运算:大小比较
    逻辑运算:针对布尔值进行比较
    [算术运算注意事项]
        运算时要注意结果的范围,使用恰当的数据类型
        整数相除不是四舍五入,而是直接舍去小数位
        小数的运算结果不精确
    [条件执行的具体实现原理]
        程序最终都是一条条的指令,CPU有一个指令指示器,指向下一条要执行的指令,
        cpu根据指示器的指示加载指令并且执行.指令大部分是具体的操作和运算,
        在执行这些操作时,执行完一个操作后,指令指示器会自动指向挨着的下一条指令.
        但有些特殊的指令,称为跳转指令,这些指令会修改指令指示器的值,让cpu跳到一个指定的地方执行.
        跳转有两种:一种是条件跳转;另一种是无条件跳转.条件跳转检查某个条件,满足则进行跳转,
        无条件跳转则是直接进行跳转.
        (作者在这里给我了提示,cpu的指令集和架构是相当复杂的,
        再通过搜索指令集的发展史,国内cpu龙芯无法打开商业市场是因为在指令集上的授权无法突破,
        CISC是复杂指令集,RISC是精简指令集)
        (另外又让我意识到了一点,java编程是越不过jvm这个层面,这个还是需要多多思考,不能轻易下结论)

[1.4 条件执行]略

[1.5 循环]略

[1.6 函数的用法]
    引入函数的原因:
        使用函数来减少重复代码和分解复杂操作.
        (这里省略了很多)
        
[1.7 函数的基本原理]
    栈引入的意义:
        解决这几个问题:
        [参数如何传递?]
        .
        [函数如何知道返回到什么地方?]
        .
        [函数结果如何传给调用方?]
        解决思路是使用内存来存放这些数据,函数调用方和函数自己就如何存放和使用这些数据达成一致的协议或约定.
        这个约定在各种计算机系统中都是类似的,存放这些数据的内存有一个相同的名字,叫栈.
        栈是一块内存,但它的使用有特别的约定,一般是先进后出,类似于一个桶,
        往栈里放数据称为入栈,最下面的称为栈底,最上面的称为栈顶,从栈顶拿出数据通常称为出栈.
        栈一般是高位地址向低位地址拓展,栈底内存地址最低,栈顶内存地址最高.
        计算机主要使用栈来存放函数调用过程中需要的数据,包括参数,返回地址,以及函数内定义的局部变量
        函数调用主要是通过栈来存储相关的数据,系统就函数调用者和函数如何使用栈做了约定,
        返回值可以简单认为是通过一个专门的返回值存储器存储的.
        从函数调用过程可以看出,调用是有成本的,每一次调用都需要分配额外的栈空间用于存储参数,
        局部变量以及返回地址,需要进行额外的入栈和出栈操作.
        栈空间是有限的,一般正常调用是没问题的,但如果栈空间过深,系统就会抛出栈溢出.

[char的真正含义]
    在java内部进行字符处理时,采用的都是Unicode,具体编码格式是UTF-16BE.
    UTF-16使用两个或四个字节表示一个字符,Unicode的编号范围是65536以内占两个字节,
    超出范围的占4个字节,BE就是先输出高位字节,再输出低位字节,这与整数的内存表示是一致的.
    char本质上是一个固定占用两个字节的无符号正整数,这个正整数对应于Unicode编号,
    用于表示那个Unicode编号对应的字符.
    由于固定占用两个字节,char只能表示Unicode编号在65536以内的字符,而不能表示超出范围的字符.
    char本质是一个整数,所以可以进行整数能做的一些运算,在进行运算时会被看作int,
    但由于char占两个字节,运算结果不能直接赋值给char类型,需要进行一些强制转换,
    这和byte/short参与整数运算是类似的.
    char类型的比较其实就是Unicode的比较.
    加减运算的另一个应用是加密和解密,将字符进行某种可逆的数学运算可以做加密运算.