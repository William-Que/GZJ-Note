[7.1 包装类]
    每种基本类型都有一个对应的包装类.包装类是什么?它是一个类,内部有一个实例变量
    保存对应的基本类型的值,这个类一般还有一些静态方法,静态变量和实例方法,以方便对数据进行操作
    Java中很多代码只能操作对象,为了能操作基本类型,需要使用其对应的包装类
    [基本用法]
        将基本类型转换为包装类的过程,一般称为"装箱",而将包装类型转换为基本类型的过程,则称为"拆箱"
        Java 5以后使用自动装箱和拆箱技术
    [共同点]
        各个包装类有很多共同点,比如,都重写了Object中的一些方法,都实现了Comparable接口,都有一些与String
    有关的方法,大部分都定义了一些静态常量,都是不可变的
    [重写Object方法]
        所有包装类都重写了Object类
        [equals]
            equals用于判断当前对象和参数传入的对象是否相同,Object类的默认实现是比较地址
            对于两个变量,只有这两个变量指向同一个对象时,equals才反馈true,它和比较运算符(==)的结果是一样的
            [equals应该反映的是对象间的逻辑相等关系],所以这个默认实现一般是不合适的,子类需要重写该实现
        [hashCode]
            hashCode返回一个对象的返回值.
            哈希值是一个int类型的数,由对象中一般不变的属性映射得来,用于快速对对象进行区分,分组等
            一个对象的哈希值不能改变
            相同对象的哈希值必须一样
            不同对象的哈希值一般应不同,但这不是必需的,可以有对象不同但哈希值相同的情况
            [hashCode和equals()方法联系密切]
                对两个对象,如果equals方法返回true,则hashCode也必须一样
                反之不要求,equal方法返回false时,hashCode可以一样,也可以不一样,但应该尽量不一样
                hashCode的默认实现一般是将对象的内存地址转换为整数
                子类如果重写了equals()方法,也必须重写hashCode
        [Comparable]
            每个包装类都实现了Java API中的Comparable接口
            Comparable接口只有一个方法compareTo()
            当前对象与参数对象进行比较,在小于,等于,大于参数时,应分别返回-1,0,1
        [包装类和String]
            除了toString()方法外,包装类还有一些其他与String相关的方法
        [常用常量]
            包装类中除了定义静态方法和实例方法外,还定义了一些静态变量
        [Number]
            6种数值类型包装类有一个共同的父类Number
            Number是一个抽象类
        [不可变性]
            包装类都是不可变类
            所谓不可变是指实例对象一旦创建,就没办法修改了,通过如下方式强制实现:
                所有包装类都声明为了final,不能继承
                内部基本类型值是私有的,且声明为了final
                没有定义setter方法
            不可变使得程序更为简单安全,因为不用操心数据被意外改写的可能,可以安全地共享数据
    [剖析Integer与二进制算法]
        Integer有一些二进制操作,包括位翻转和循环移位,也需要分析valueOf实现
        [位翻转]
            Integer有两个静态方法,可以按位进行翻转
            ...P180
        [循环位移]
            Integer有两个静态方法,可以进行循环位移
            ...P180
        [valueOf的实现]
            ...看不进去
            享元模式
    [剖析Character]
        ...
            
            
            
            
            
            
            
            
            
            
            
            
            
            