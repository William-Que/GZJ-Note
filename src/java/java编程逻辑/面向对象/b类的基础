[引言]
    程序主要就是'数据'以及'对'数据的操作.

[3.1 类的基本概念]
    在某些看情况下,类被看做函数的容器
    类更多表示的是自定义数据类型
    [将类看做函数容器]
        静态方法(public static修饰)---相对应---实例方法(没有static修饰)必须通过实例或者对象调用
        通过private封装和隐藏内部实现细节,避免被误操作,是计算机程序的一种基本思维方式
        (将类看做函数的容器,感觉就像是把类中private/public等修饰符,将类化作一个整体,内部运算封闭,对外提供相应的方法以供使用)
    [将类看做自定义数据类型]
        所谓自定义数据类型,就是除了8种基本数据类型以外的其他类型
        一个数据类型由其包含的属性以及该类型可以进行的操作组成,属性又可以分为是类型本身具有的属性,还是一个具体实例具有的属性,同样,操作也可以分为类型本身可以进行的操作,还是一个具体实例可以进行的操作
        一个数据类型由4部分组成:
            @@@类型本身的具有的属性,通过'类变量'体现
            @@@类型本身可以进行的操作,通过'类方法'体现
            @@@类型实例具有的属性,通过'实例变量'体现
            @@@类型实例可以进行的操作,通过'实例方法'体现
        [类变量]    
            类型本身具有的属性通过类变量来体现,经常用于表示一个类型中的常量
            static用来修饰类变量,表示类变量的时候,用static修饰是必须的,public和static都不是必须的;其中,与static相对的是实例变量,没有static修饰符
            final修饰变量的时候表示常量,即变量赋值后就不能再修改了
        [实例变量和实例方法]
            所谓实例,字面上的意思就是一个实际的例子.
            实例变量表示具体实例所具有的属性,实例方法表示具体的实例可以进行的操作.
            与基本类型对比,"int a;" 这个语句中,int就是类型,而a就是实例.
            [实例方法直接访问实例变量]
                意思是,在实例方法中,有一个隐含的参数,这个参数就是当前操作的实例自己,直接操作实例变量,实际也需要通过参数进行
            [实例方法和类方法的区别]
                类方法只能访问类变量,不能访问实例变量,可以调用其他的类方法,不能调用实例方法.
                实例方法既能访问实例变量,也能访问类变量,既可以调用实例方法,也可以调用类方法
    [声明变量操作的意义]
        自定义数据类型的变量和数组的变量是类似的,都有两块内存:一块存放实际内容,一块存放实际内容的位置.
        声明变量本身只会分配存放位置的内存空间,这块空间还没有指向任何实际内容.因为这种变量和数组变量本身不存数据,而只是存储实际内容的位置,它们都称为引用类型的变量
    [p=new Point();具体分析]
        分配内存,以存储新对象的数据,对象数据包括这个对象的属性,具体包括其实例变量x和y.
        给实例变量设置默认值,int 类型默认值为0
        调用构造方法,是new操作的一部分
    [小结]
        对实例变量和实例方法的访问都通过对象来进行,通过对象来访问和操作其内部的数据是一种基本的面向对象的思维.
        一般而言,不应该将实例变量声明为public,而只应该通过对象的方法对实例变量进行操作.这样操作是为了减少误操作,直接访问变量没有办法进行参数检查和控制,而通过方法修改,可以在方法中进行检查.
    [修改变量默认值]
        略
    [this]
        在get/set方法中,this表示当前实例,在语句this.x=x;中,this.x表示实例变量x,而右边的x表示方法参数中的x,前面我们提到,在实例方法中,有一个隐含的参数,这个参数是this,没有歧义的情况下,可以直接访问实例变量,在这个例子中,两个变量名都叫x,则需要通过this来消除歧义.
        用于在构造方法中,调用其他的构造方法.(作为调用构造方法对赋值进行初始化,需要将该语句放到第一行)
    [构造方法]
        通过构造方法,可以对实例变量进行赋初始值.
        @@@构造方法的名称是固定的,与类名相同.靠这个用户和java系统就都能容易地知道哪些是构造方法.
        @@@没有返回值,也不能有返回值.构造方法隐含的返回值就是实例本身.
        [默认构造方法和私有构造方法]
            默认构造方法
                每一个类至少有一个构造方法,在通过new创建对象的过程中会被调用.但是一旦自己定义了构造方法,java就不会再自动生成默认的构造方法
            私有构造方法
                构造方法可以用private来修饰
                @@@不能创建类的实例,类只能被静态访问,
                @@@能创建类的实例,但只能被类的静态方法调用.
                @@@只是用来被其他多个构造方法调用,减少重复代码
    [类和对象的生命周期]
        略
    [小结]
        通过类实现自定义数据类型,封装该类型的数据所具有的属性和操作,隐藏实现的细节,从而在更高的层次(类和对象的层次,而非基本数据类型和函数的层次)上考虑和操作数据,是计算机解决复杂问题的重要思维方式之一.
        [关键字汇总]
            public:可以修饰类,类方法,类变量,实例变量,实例方法,构造方法,表示可被外部访问.
            private:可以修饰类,类方法,类变量,实例变量,实例方法,构造方法,表示不可以被外部访问,只能类内部被使用
            static:修饰[类变量]和[类方法],它可以修饰内部类
            this:表示当前实例,可以用于调用其他构造方法,访问实例变量,访问实例方法
            final:修饰类变量,实例变量,表示只能被赋值一次,也可以修饰实例方法和局部变量.
     
[3.2 类的组合]
    程序是用来解决现实问题的,将现实问题中的概念映射为程序中的概念,是初学编程的一个跨越.
    [String]
        String是java api中的一个类,表示多个字符,一段文本或者字符串,它的内部是一个char数组,提供了若干方法用于操作字符串.
    [Data]
        Data是java api中的一个类,表示日期和时间,它内部是一个long类型的值,也提供了若干方法用于操作日期和时间
        用无参的构造方法新建一个Date对象,这个对象就表示当前时间.
    在设计时,每个类封装其内部细节,对外提供高层次的功能,使其他类在更高层次上考虑和解决问题,是程序设计的一种基本思维方式.
    [血缘关系]
        一个类定义中还可以引用它自己(不是特别理解)
        实例变量不需要一开始就有值  
    [目录和文件]
        两个类之间可以互相引用,这些属性不需要一开始就设置的,也不是必须设置的.(不是特别理解)
    [小结]
        分解现实问题中涉及的概念以及概念间的关系,将概念表示为多个类,通过类之间的组合来表达更为复杂的概念以及概念之间的关系,是计算机程序设计的一种基本思维方式
        正所谓,道生一,一生二,二生三,三生万物,如果将二进制表示和运算看作一,将基本数据类型看作二,基本数据类型形成的类看作三,那么,类的组合以及继承则使得三生万物.

[3.3 代码组织机制]
    使用任何语言进行编程都有一个类似的问题,那就是如何组织代码.
    [包的概念]
        任何语言进行编程都有一个相同的问题,就是'命名冲突'.
        带完整包名的类名称为完全限定名
        (思考import算是一个什么操作?)
    [包范围可见性]
        对于类,变量和方法,都可以有一个可见性修饰符public/private,我们还提到,可以不写修饰符.如果什么修饰符都不写,它的可见性范围就是同一个包,同一个包内的其他类可以访问,而其他包内的类则不可以访问.
        同一个包指的是同一个直接子包,子包下的类并不能访问.
        protected可见性包括包可见性,声明为protected不仅表明子类可以访问,还表明同一个包内的其他类可以访问,即使这些类不是子类也可以.
        可见性范围从小到大:private < 默认(包) < protected < public
    [jar包]
        为方便使用第三方代码,也为了方便我们写的代码给其他人使用,各大程序语言大多有打包的概念,打包的一般不是源代码,而是编译后的代码.
        在java中,编译后的一个或多个包的java.class文件可以打包成为一个文件,java中打包的命令为jar,打包后的文件扩展名为.jar,一般称为jar包
    [程序的编译与连接]
        从java源代码到运行的程序,有编译和链接两个步骤.编译是将源代码文件变成扩展名是.class的一种字节码,这个工作一般是由javac命令完成的.链接是在运行时动态执行的,.class文件不能直接运行,运行的是java虚拟机.
        java虚拟机就是执行java命令,这个命令解析.class文件,转换为机器能识别的二进制代码,然后运行
        所谓的链接就是根据引用到的类加载相应的字节码并执行
        java编译和运行时,都需要以参数指定一个classpath,即类路径.类路径可以有多个,对于直接的class文件,路径是class文件的根目录;对于jar包,路径是jar包的完整包名(包括路径和jar包)
        import是编译时的概念,用于确定完全限定名,在运行时,只根据完全限定名寻找并加载类.编译和运行都依赖类路径,类路径中的jar文件会被解压缩用于寻找和加载类
    [小结]
        java 9 引入模块的概念       
     
     
        