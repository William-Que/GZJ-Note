[引言]
容器类是基于泛型的,不理解泛型,就难以深刻理解容器类
[8.1 基本概念和原理]
之前我们一直强调数据类型的概念,Java有8种基本类型,可以定义类,相当于自定义数据类型,类之间还可以有组合和继承
提到接口,关心的不是类型,而是能力,针对接口和能力编程,不仅可以复用代码,还可以降低耦合,提高灵活性
泛型将接口的概念进一步延伸,"泛型"的字面意思就是广泛的类型
类,接口和方法代码可以应用于非常广泛的类型,代码与它们能够操作的数据类型不再绑定在一起
同一套代码可以用于多种数据类型,可以复用代码,降低耦合,增加可读性
    [一个简单泛型类]
    Pair就是一个泛型类,与普通类的区别体现在:
        类名后面多了一个<T>
        first和second的类型都是T
        [T是什么呢?]
            T表示参数类型,泛型就是类型参数化,处理的数据类型不是固定,而是可以作为参数传入
        [基本概念]
        ...
        [基本原理]
        ...
        [泛型的好处]
        ...
    [容器类]
    ...
    [泛型方法]
    ...
    [泛型接口]
    ...
    [类型参数的限定]
    ...
        [上界为某个具体类]
        ...
        [上界为某个接口]
        ...
        [上界为其他类型参数]
        ...
    [小结]
    ...
    
    
    
[8.2 解析通配符]
    ...
    [更简洁的参数类型限定]
    ...
    [理解通配符]
    ...
    [超类型通配符]
    ...
    [通配符比较]
    ...
    
    
    
[8.3 细节和局限性]
...
    [使用泛型类,方法和接口]
    ...
    [定义泛型类,方法和接口]
    ...
    [泛型与数组]
    ...
    [小结]
    ...
    
    
    
    
    
    
    
    
        