[引言]
.
    [10.1 剖析HashMap]
    .
        [Map接口]
        这里Map不是地图的意思,而是表示映射关系,是一个接口,实现Map接口有多种方式,
        HashMap实现的方式利用了Hash
        [小结]
        本节介绍了HashMap的用法和实现原理,它实现了Map接口,可以方便地按照键存取值,
        内部使用数组链表和哈希的方式进行实现.
            [特点小结]
            根据键保存和获取值的效率都很高,为O(1),每个单向链表往往只有一个或少数个节点,
            根据hash值就可以直接快速定位.
            HashMap中的键值对没有顺序,因为hash值是随机的
            [匹配选择的原则]
            如果经常需要根据键存取值,而且不要求顺序,那么HashMap就是理想的选择
            如果要保持添加的顺序,可以使用HashMap的一个子类LinkedHashMap
            Map还有一个重要的实现类,TreeMap,它可以排序
            在高并发的场景中,推荐使用ConcurrentHashMap
        根据哈希值存取对象,比较对象是计算机程序中一种重要的思维方式,它使得存取对象主要依赖于自身的Hash值,
        而不是与其他对象进行比较,存取效率也与集合大小无关,高达O(1),
        即使进行比较,也利用Hash值提高比较性能
    [10.2 剖析HashSet]
    .
        [小结]
        本节介绍HashSet的用法和实现原理,它实现了Set接口,内部实现利用了HashMap
            [以下特点]
            没有重复元素
            可以高效添加,删除元素,判断元素是否存在,效率都为O(1)
            没有顺序
        HashSet可以方便高效地实现去重,集合运算等功能.
        如果要保持添加的顺序,可以使用HashSet的一个子类LinkedHashSet.
        Set还有一个重要的实现类TreeSet,它可以排序
    [10.3 排序二叉树]
    .
    [10.4 剖析TreeMap]
    .
    [10.5 剖析TreeSet]
    .
    [10.6 剖析LinkedHashMap]
    .
    [10.7 剖析EnumMap]
    .
    [10.8 剖析EnumSet]
    .