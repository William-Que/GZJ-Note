[引言]
所谓容器,顾名思义就是容纳其他数据的.
我们先介绍关于列表和队列的一些主要类,具体包括ArrayList,LinkedList和ArrayDeque
    [9.1 剖析ArrayList]
    动态数组容器类ArrayList
        [基本用法]
        ArrayList是一个泛型容器,新建ArrayList需要实例化泛型参数
            主要方法有:
                public boolean add(E e)     //添加元素到末尾
                public boolean isEmpty()    //判断是否为空
                public int size()           //获取长度
                public E get(int index)     //访问指定位置的元素
                public int indexOf(Object o)    //查找元素,如果找到,返回索引位置,否则返回-1
                public int lastIndexOf(Object o)    //从后往前找
                public boolean Contains(Object o)   //是否包含指定元素,依据是equals返回值
                public E remove(int index)      //删除指定位置元素,返回值为被删除对象
                //删除指定对象,只删除第一个相同的对象,返回值表示是否删除了元素
                //如果o为null,则删除值为null的元素
                public boolean remove(Object o)     
                public void clear()         //删除所有元素
                //在指定位置插入元素,index为0表示插入最前面,index为ArrayList的长度表示插到最后面
                public void add(int index, E element)
                public E set(int index , E element)     //修改指定位置的元素内容
        [基本原理]
        封装复杂操作,提供简化接口
        [迭代]
        提供了一个迭代操作的
            [迭代器接口]
            ArrayList实现了Iterable接口,Iterable表示可迭代
                [需要澄清处]
                    Iterable表示对象可以被迭代,它有一个方法iterator(),返回Iterable对象,
                    实际通过Iterator接口的方法进行遍历
                    如果对象实现了Iterable,就可以使用foreach语法
                    类可以不实现Iterable,也可以创建Iterator对象
            [ListIterator]
            (没看懂用法是什么)
            [迭代的陷阱]
            关于迭代器有,有一种常见的误用,就是在迭代的中间调用容器的删除方法
            因为迭代器内部会维护一些索引位置相关的数据,要求在迭代过程中,
            容器不能发生结构性变化,否则这些索引就失效了.
            [容器的结构性变化]就是添加,插入和删除元素,只是修改元素内容不算结构性变化
            可以使用迭代器的删除方法
            [迭代器实现的原理]
            具体实现:
                public Iterator<E> iterator(){ return new Itr(); }
                新建了一个Itr对象,Itr是一个成员内部类,实现了Iterator接口,声明为:
                private class Itr implements Iterator<E>
                Itr有三个实例成员变量
                    int cursor;     //下一个要返回的元素位置
                    int lastRet = -1;       //最后一个返回的索引位置,如果没有,为-1
                    int expectedModCount = modCount;        //表示期望的修改次数,
                                               初始化为外部类当前的修改次数modCount
            next方法中,前面部分检查是否发生了结构性变化,如果没有改变,就更新cursor和lastRet的值,
            [迭代器的好处]
            迭代器语法更为通用,它适用于各种容器类
            迭代器表示的是一种关注点分离的思想,将数据的实际组织方式与数据的迭代遍历相分离,一种设计模式
            需要访问容器元素的代码只需要一个Iterator接口的引用,不需要关注数据的实际组织方式,
            可以使用一致和统一的方式进行访问
            从封装的思路上讲,迭代器封装了各种数据组织方式的迭代操作,提供了简单和一致的接口
        [ArrayList实现的接口]
        Java的各种容器类有一些共性的操作,这些共性以接口的方式体现,Iterable接口就是
            实现了三个主要接口:
            Collection,List,RandomAccess
            [Collection]
            Collection表示一个数据集合,数据间没有位置或顺序的概念
            Java 7 中的接口定义为:
                public interface Collection<E> extends Iterable<E>{
                    int size();
                    boolean isEmpty();
                    boolean contains(Object o);
                    Iterator<E> iterator();
                    Object[] toArray();
                    <T> T[] toArray(T[] a);
                    boolean add(E e);
                    boolean remove(Object o);   
                    boolean containsAll(Collection<? extends E> c);     //表示检查是否
                    //包含了参数容器中的所有元素,只有全包含才返回true
                    boolean removeAll(Collection<?> c); 
                    boolean retainAll(Collection<?> c);     //表示只保留参数容器中的元素,其他元素会删除
                    void clear();
                    boolean equals(Object o);
                    int hashCode();
                }
            [List]
            List表示有顺序或位置的数据集合,它扩展了Collection,主要方法有:
                boolean addAll(int index, Collection<? extends E> c);
                E get(int index);
                E set(int index,E element);
                void add(int index , E element);
                E remove(int index);
                int indexOf(Object o);
                int lastIndexOf(Object o);
                ListIterator<E> listIterator();
                ListIterator<E> listIterator(int index);
                List<E> subList(int fromIndex, int toIndex);
            [RandomAccess]
            RandomAccess的定义为:
                public interface RandomAccess{
                }
                没有定义任何代码
                这种没有定义任何代码的接口在Java中被称为标记接口,用于声明类的一种属性
                这里,实现了RandomAccess接口的类表示可以随机访问,
                可随机访问就是具备类似数组那样的特性,数据在内存是连续存放的,
                根据索引值就可以直接定位到具体的元素,访问效率很高
        [ArrayList的其他方法]
        以下为
            [构造方法1]:public ArrayList(int initialCapacity)
                指定的大小initialCapacity初始化内部数组的大小,在事先预知元素长度的情况下,或者,
                预先指定长度上限的情况下,使用这个构造方法可以避免重新分配和复制数组 
            [构造方法2]:public ArrayList(Collection<? extends E> c)
                该构造方法以一个已有的Collection构建,数据会新复制一份
            [返回数组方法1]:public Object[] toArray()
                该方法返回Object数组
            [返回数组方法2]:public <T> T[] toArray(T[] a)
                该方法返回对应类型的数组,如果参数数组长度足以容纳所有元素,就使用该数组,
                否则就新建一个数组
            [Arrays的静态方法asList]
                该方法可以返回对应的List,需要注意的是,这个方法返回的List,
                它的实现类并不是本节介绍的ArrayList,而是Arrays类的一个内部类,
                在这个内部类的实现中,内部用的数组就是传入的数组,没有拷贝,也不会动态改变大小,
                所以对数组的修改也会反映到List中,对List调用add,remove方法会抛出异常
        [ArrayList特点分析]
        以后会介绍各种容器类和数据组织方式,之所以有各种不同的方式,是因为不同的方式有不同的特点,
        而不同的特点有不同适合的场合.
        考虑特点时,性能是其中一个很重要的部分,但性能不是一个简单的高低之分,
        对于一种数据结构,有的操作性能高,有的操作性能低.
        理解每种数据结构的特点,根据场合的不同,选择不同的数据结构
            [ArrayList的特点小小结]
                对于ArrayList,它的特点是内部采用动态数组实现,决定了
                    @@@可以随机方法,按照索引位置进行访问效率很高,用算法描述中的术语就是,O(1),
                       简单来说就是一步到位
                    @@@除非数组已经排序,否则按照内容查找元素效率比较低,具体是O(N),
                       N为内容数组长度,也就是说,性能与数组长度成正比
                    @@@添加元素的效率还可以,重新分配和复制数组的开销被平摊了,具体来说,
                       添加N个元素的效率为O(N)
                    @@@插入和删除元素的效率比较低,因为需要移动元素,具体为O(N)
        [线程安全]
        需要说明的是ArrayList不是线程安全的,
        实现线程安全的一种方式是使用Collections提供的方法装饰ArrayList
    [9.2 剖析LinkedList]
    除了实现了List接口外,LinkedList还实现了Deque和Queue接口,可以按照队列,栈和双端队列的方式进行
        [用法]
        有两个构造方法:一个是默认构造方法,一个是可以接受已有的Collection
            public LinkedList()
            public LinkedList(Collection<? extends E> c)
        具体可以如下创建:
            List<String> list = new LinkedList<>();
            List<String> list2 = new LinkedList<>(
            Arrays.asList(new String[]{"a","b"})
            )
        LinkedList和ArrayList一样,同样实现了List接口,而List接口扩展了Collection接口,
        Collection接口又扩展了Iterable接口
            [实现队列接口Queue]
            LinkedList还实现了队列接口Queue,所谓队列就类似于日常生活中的各种排队,
            特点就是先进先出,在尾部添加元素,从头部删除元素
                [接口定义]:
                public interface Queue<E> extends Collection<E>{
                    boolean add(E e);
                    boolean offer(E e);
                    E remove();
                    E poll();
                    E element();
                    E peek();
                }
                [Queue接口扩展了Collection,其三个主要操作为]
                在尾部添加元素(add , offer)
                查看头部元素(element , peek),返回头部元素,但不改变队列
                删除头部元素(remove , poll),返回头部元素,并且从队列中删除
                每种操作都有两种形式为以上括号里的两种形式
                区别在于,对于特殊情况的处理不同
                特殊情况是指队列为空或者队列为满
                为满:队列长度大小限制,而且已经占满了
                在队列为空时:
                    element和remove会抛出异常NoSuchElementException;
                    peek和poll返回特殊值null;
                在队列为满时:
                    add会抛出异常IllegalStateException
                    offer会返回false
        [实现原理]
        .
            [内部组成]
            .
            [add方法]
            .
            [根据索引访问元素get]   
            .
            [根据内容查找元素]
            .
            [插入元素]
            .
            [删除元素]
            .
        [LinkedList特点分析]
            用法上,LinkedList是一个List,但也实现了Deque接口,可以作为队列,栈和双端队列使用.
            实现原理上,LinkedList内部是一个双向链表,并维护了长度,头节点和尾节点.
            [有如下特点]
                按需分配空间,不需要预先分配很多空间
                不可以随机访问,按照索引位置访问效率比较低,必须从头或尾顺着链接找,效率为O(N/2)
                不管列表是否已排序,只要按照内容查找元素,效率都比较低,必须逐个比较,效率为O(N)
                在两端添加,删除元素的效率很高,为O(1)
                在中间插入,删除元素,要先定位,效率比较低,为O(N),但修改本身的效率很高,效率为O(1)
            [匹配选择的原则]
                如果列表长度未知,添加,删除,操作比较多,尤其经常从两端进行操作,
                而按照索引位置访问相对比较少,则LinkedList是比较理想的选择
    [9.3 剖析ArrayDeque]
    .
        [实现原理]
        .
            [循环数组]
            所谓循环数组是指元素到数组尾之后可以接着从数组头开始,
            数组的长度,第一个和最后一个都与head和tail这两个变量有关,具体来说
            [构造方法]
            .
            [从尾部添加]
            .
            [从头部添加]
            .
            [从头部删除]
            .
            [查看长度]
            .
            [检查给定元素是否存在]
            .
            [toArray方法]
            .
            [原理小结]
            ArrayDeque的基本原理,内部它是一个动态扩展的循环数组,
            通过head和tail变量维护数组的开始和结尾,数组长度为2的幂次方,使用高效的位操作进行各种判断,
            以及对head和tail进行维护
        [ArrayDeque特点分析]
            ArrayDeque实现了双端队列,内部使用循环数组实现
                [特点如下]
                在两端添加,删除元素的效率很高,动态扩展需要的内存分配以及数组复制开销可以被平摊,
                具体来说,添加N个元素的效率,为O(N)
                根据元素内容查找和删除的效率比较低,为O(N)
                与ArrayList和LinkedList不同,没有索引位置的概念,不能根据索引位置进行操作
            [匹配选择的原则]
                如果只需要Deque接口,从两端进行操作,一般而言,ArrayDeque效率更高一些,应该被优先使用
                如果同时需要根据索引位置进行操作,或者经常需要在中间进行插入和删除,则应该选择LinkedList