接口与抽象类
    定义类的过程,就是抽象和封装的过程,而接口与抽象类则是对实体类进行更高层次的抽象,仅定义公共行为和特征.
    接口和抽象类的共同特征是都不能被实例化,但可以定义引用变量指向实例对象.
    抽象类是模板式设计,抽象类包含一组相对具体的特征,性格偏内向.例如某品牌的特定型号的汽车,底盘架构等
    接口是契约式设计,接口是开放的,性格偏外向,它就像一份合同,定义了方法名,参数,返回值,甚至抛出异常的类型
    
抽象类在被继承时体现的是is-a关系,接口在被实现时体现的是can-do关系.
与接口相比,抽象类通常是对同类事物相对具体的抽象,通常包含抽象方法,实体方法,属性变量.如果一个抽象类只有一个抽象方法,那么它就等同于一个接口.
is-a符合里氏代换原则
can-do符合符合接口隔离原则

接口是顶级的"类",虽然关键字是interface,但编译后的字节码扩展名依旧是.class
抽象类是二当家,接口位于顶层,而抽象类对各个接口进行组合,然后实现部分接口的行为

java中类的继承采用单继承模式,类避免多重继承是为了减少java的复杂性

接口继承接口的关键字是extends,而不是implements,允许多重继承,是因为接口有契约式的行为约定,没有任何具体的实现和属性,某个实现类在实现多重继承时,只是说明"can do many things"
?!?当纠结定义接口还是抽象类时,优先推荐定义为接口,遵循接口隔离原则,按某个维度划分成多个接口,然后再用抽象类去implements某些接口,这样做可方便后续的扩展和重构
    
    

    