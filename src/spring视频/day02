






[注解方式和配置文件混合使用]
    1 创建对象操作使用配置文件方式实现
    2 注入属性操作使用注解方式实现(自定义类型的属性,通过注解方式注入)
    
[AOP]
    1 aop概述
    2 aop底层原理
    3 aop操作相关术语(专业描述)
    [aop概述]
    aop:
        面向切面(方面)编程,扩展功能不修改源代码实现
        采用横向抽取机制,取代了传统纵向继承体系重复性代码
        [横向抽取机制]
            方式一:[使用jdk动态代理,针对有接口的情况]
            使用动态代理方式,创建 接口实现类 的代理对象
            实现类 要实现一个接口
            创建一个和实现类平级的一个对象,这个对象产生不是new出来的 , 是通过动态代理对象创建出来的
            代理对象,是一个假的对象,不是一个真正的对象,但是和实现类具有相同的功能
            方式二:[没有接口的情况]
            创建user类的子类的代理对象
            在子类里面调用父类的方法完成增强
            使用cglib动态代理,没有接口的情况
            
[AOP操作术语]
    主要重点是切入点,增强,切面
    [连接点]
        类里面的哪些方法可以被增强,这些方法就称为连接点
    [切入点(重要)]
        在类里面可以有很多方法被增强,比如实际操作中,只是增强了里面add方法和update方法,实际增强的方法就称为切入点
    [通知/增强(重要)]
        实际增强的逻辑,称为增强,比如扩展日志功能,这个日志功能称为增强
        前置增强:方法之前来执行
        后置增强:方法之后来执行
        异常增强:方法出现异常来执行
        最终增强:在方法之后的后面来执行
        环绕增强:在方法之前和之后来执行
    [切面(重要)]
        把增强应用到具体方法上面,这个过程称为切面
        把增强用到切入点的过程,就叫做切面
    [目标对象]
        增强方法所在的类,就是目标对象
    [织入]
        ..
    [代理]
        ..
    
[spring的aop操作]
    1 在spring里面进行aop操作,使用aspectj实现
    aspectj是一个面向切面的框架
        (1)aspectj不是spring的一部分,和spring一起使用来进行aop操作
        (2)新版本都建议使用aspectj实现aop
    2 使用aspectj实现aop有两种方式
        (1)基于aspectj的xml配置
        (2)基于aspectj的注解方式
    
    
    
    
        
        
        
        
        
        
        
        
        
        
        